require "searchlight-control"


-- On Load
script.on_load(
function(event)

    -- TODO Is there anything unsaved we need to recalculate every load here?

end)


-- On Init
script.on_init(
function(event)

    InitForces()
    InitTables()

end)


-- On Force Created
script.on_event(defines.events.on_force_created,
function(event)

    if event.force.name ~= searchlightFriend and event.force.name ~= searchlightFoe then
        SetCeaseFires(event.force)
    end

end)


-- On Construction
script.on_event(defines.events.on_built_entity,
function(event)

    AddSearchlight(event.created_entity)

end,
{{filter="type", type = "turret"},       -- TODO apparently you can just say "turret" as a filter, no need to specify type (cleanup other funcs too)
 {filter="name", name = "searchlight"}}) -- TODO we probably will want to track any turrets at all built within range of our searchlights...


-- On Script Construction
script.on_event(defines.events.script_raised_built,
function(event)

    AddSearchlight(event.created_entity)

end) -- TODO filter this & other events


-- On Script Revive
script.on_event(defines.events.script_raised_revive,
function(event)

    AddSearchlight(event.created_entity)

end)


-- On Script Destruction
script.on_event(defines.events.script_raised_destroy,
function(event)

    RemoveSearchlight(event.created_entity)

end)


-- On Deconstruction
script.on_event(defines.events.on_pre_player_mined_item,
function(event)

    RemoveSearchlight(event.entity)

end,
{{filter="type", type = "turret"},
 {filter="name", name = "searchlight"},
 {filter="name", name = "searchlight-dummy"}})


-- On Death
script.on_event(defines.events.on_entity_died,
function(event)

    if event.entity.name == "searchlight-turtle" then
        game.print("dead turtle")
    else
        RemoveSearchlight(event.entity)
    end

end,
{{filter="type", type = "turret"},
 {filter="type", type = "unit"},
 {filter="name", name = "searchlight"},
 {filter="name", name = "searchlight-dummy"},
 {filter="name", name = "searchlight-turtle"}})


-- On Command Completed
script.on_event(defines.events.on_ai_command_completed,
function(event)
    -- TODO ConsiderTurtle(event.unit_number)

    -- Contains
    -- unit_number :: uint: unit_number/group_number of the unit/group which just completed a command.
    -- result :: defines.behavior_result
    -- was_distracted :: boolean: Was this command generated by a distraction.

end)


-- On Tick
script.on_event(defines.events.on_tick,
function(event)
    CheckForFoesNearSL(event.tick)
    DecrementBoostTimers()
end)
