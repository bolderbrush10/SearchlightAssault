require "control-common"
require "control-grid"
require "control-searchlight"
require "control-turtle"

--
-- TODO filter all these events
--


-- On Load
script.on_load(
function(event)

  -- TODO Is there anything unsaved we need to recalculate every load here?

end)


-- On Init
script.on_init(
function(event)

  InitForces()
  InitTables()

end)


-- On Force Created
script.on_event(defines.events.on_force_created,
function(event)

  if event.force.name ~= searchlightFriend and event.force.name ~= searchlightFoe then
    SetCeaseFires(event.force)
  end

end)

--
-- CONSTRUCTIONS
--


-- TODO steal this pattern
-- (for-loop is needed because filters can't be applied to an
-- array of events!)
-- for event_name, e in pairs({
--   on_built_entity       = defines.events.on_built_entity,
--   on_robot_built_entity = defines.events.on_robot_built_entity,
--   script_raised_built   = defines.events.script_raised_built,
--   script_raised_revive  = defines.events.script_raised_revive
-- defines.events.on_trigger_created_entity
-- }) do
-- --~ log("WT.turret_list: " .. serpent.block(WT.turret_list))
-- --~ log("event_name: " .. serpent.block(event_name) .. "\te: " .. serpent.block(e))
--   script.on_event(e, function(event)
--       WT.dprint("Entered event script for %s.", { event_name })
--       on_built(event)
--       WT.dprint("End of event script for %s.", { event_name })
--     end, {
--     {filter = "type", type = WT.turret_type},
--     {filter = "name", name = WT.steam_turret_name, mode = "and"},

--     {filter = "type", type = WT.turret_type, mode = "or"},
--     {filter = "name", name = WT.water_turret_name, mode = "and"},

--     {filter = "type", type = WT.turret_type, mode = "or"},
--     {filter = "name", name = WT.extinguisher_turret_name, mode = "and"},
--   })
-- end

-- Via Player
script.on_event(defines.events.on_built_entity,
function(event)

  AddSearchlight(event.created_entity)

end,
{{filter="type", type = "turret"},       -- TODO apparently you can just say "turret" as a filter, no need to specify type (cleanup other funcs too)
 {filter="name", name = "searchlight"}}) -- TODO we probably will want to track any turrets at all built within range of our searchlights...


-- Via Robot
script.on_event(defines.events.on_robot_built_entity,
function(event)

  AddSearchlight(event.created_entity)

end,
{{filter="type", type = "turret"},
 {filter="name", name = "searchlight"}})


-- Via Script
script.on_event(defines.events.script_raised_built,
function(event)

  AddSearchlight(event.created_entity)

end)


-- Via Revived by Script
script.on_event(defines.events.script_raised_revive,
function(event)

  AddSearchlight(event.created_entity)

end)

--
-- DESTRUCTIONS
--

-- Via Player
script.on_event(defines.events.on_pre_player_mined_item,
function(event)

  RemoveSearchlight(event.entity)

end,
{{filter="type", type = "turret"},
 {filter="name", name = "searchlight"}})


-- Via Robot
script.on_event(defines.events.on_robot_mined_entity,
function(event)

  RemoveSearchlight(event.entity)

end,
{{filter="type", type = "turret"},
 {filter="name", name = "searchlight"}})


-- Via Damage
script.on_event(defines.events.on_entity_died,
function(event)

  RemoveSearchlight(event.entity)

end,
{{filter="name", name = "searchlight"}})


-- Via Script
script.on_event(defines.events.script_raised_destroy,
function(event)

  RemoveSearchlight(event.created_entity)

end)

--
-- Misc
--

-- On Command Completed
script.on_event(defines.events.on_ai_command_completed,
function(event)
  -- TODO ConsiderTurtle(event.unit_number)

  -- Contains
  -- unit_number :: uint: unit_number/group_number of the unit/group which just completed a command.
  -- result :: defines.behavior_result
  -- was_distracted :: boolean: Was this command generated by a distraction.

end)


-- On Tick
script.on_event(defines.events.on_tick,
function(event)
  CheckForFoesNearSL(event.tick)
  DecrementBoostTimers()
  CheckElectricNeeds()
end)


-- Manual debug tool
-- TODO remove
script.on_event(defines.events.on_console_command,
function (event)
  if game.players[1].selected then
    game.players[1].selected.active = not game.players[1].selected.active
    game.players[1].selected.destructible = true
    game.print("toggled active")
  else
    game.print("nothing selected")
  end
end)
